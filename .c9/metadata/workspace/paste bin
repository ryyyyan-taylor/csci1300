{"filter":false,"title":"paste bin","tooltip":"/paste bin","undoManager":{"mark":7,"position":7,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":42},"action":"remove","lines":["  cout<<\"\\nSurface Area: \" << surfacearea;"],"id":2},{"start":{"row":0,"column":0},"end":{"row":0,"column":38},"action":"insert","lines":["result = ((num<=1)? 1 : log10(num)+1);"]}],[{"start":{"row":0,"column":38},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":2,"column":0},"end":{"row":18,"column":4},"action":"insert","lines":["    int digits = 1;","    if(n<0){","        n *= -1;","    }","    ","    if(n<10){","        digits = 1;","    }","    ","    if(n>=10 || n<100){","        digits = 2;","    }","    ","    if(n>=100 || n<1000){","        digits = 3;","    }","    "],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":18,"column":4},"action":"remove","lines":["result = ((num<=1)? 1 : log10(num)+1);","","    int digits = 1;","    if(n<0){","        n *= -1;","    }","    ","    if(n<10){","        digits = 1;","    }","    ","    if(n>=10 || n<100){","        digits = 2;","    }","    ","    if(n>=100 || n<1000){","        digits = 3;","    }","    "],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":18,"column":2},"action":"insert","lines":["for (i=1; i<=rows; i++) ","    { ","        // Print stars for each solid rows ","        if (i==1 || i==rows) ","            for (j=1; j<=rows; j++) ","                cout << \"*\"; ","  ","        // stars for hollow rows ","        else","            for (j=1; j<=rows; j++) ","                if (j==1 || j==rows) ","                    cout << \"*\"; ","                else","                    cout << \" \"; ","  ","        // Move to the next line/row ","        cout << \"\\n\"; ","    } ","} "],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":18,"column":2},"action":"remove","lines":["for (i=1; i<=rows; i++) ","    { ","        // Print stars for each solid rows ","        if (i==1 || i==rows) ","            for (j=1; j<=rows; j++) ","                cout << \"*\"; ","  ","        // stars for hollow rows ","        else","            for (j=1; j<=rows; j++) ","                if (j==1 || j==rows) ","                    cout << \"*\"; ","                else","                    cout << \" \"; ","  ","        // Move to the next line/row ","        cout << \"\\n\"; ","    } ","} "],"id":7},{"start":{"row":0,"column":0},"end":{"row":23,"column":22},"action":"insert","lines":["#include <bits/stdc++.h> ","using namespace std; ","  ","// Function for hollow square ","void hollowSquare(int rows) ","{ ","    int i, j; ","    for (i=1; i<=rows; i++) ","    { ","        // Print stars for each solid rows ","        if (i==1 || i==rows) ","            for (j=1; j<=rows; j++) ","                cout << \"*\"; ","  ","        // stars for hollow rows ","        else","            for (j=1; j<=rows; j++) ","                if (j==1 || j==rows) ","                    cout << \"*\"; ","                else","                    cout << \" \"; ","  ","        // Move to the next line/row ","        cout << \"\\n\"; "]}],[{"start":{"row":0,"column":0},"end":{"row":23,"column":22},"action":"remove","lines":["#include <bits/stdc++.h> ","using namespace std; ","  ","// Function for hollow square ","void hollowSquare(int rows) ","{ ","    int i, j; ","    for (i=1; i<=rows; i++) ","    { ","        // Print stars for each solid rows ","        if (i==1 || i==rows) ","            for (j=1; j<=rows; j++) ","                cout << \"*\"; ","  ","        // stars for hollow rows ","        else","            for (j=1; j<=rows; j++) ","                if (j==1 || j==rows) ","                    cout << \"*\"; ","                else","                    cout << \" \"; ","  ","        // Move to the next line/row ","        cout << \"\\n\"; "],"id":8},{"start":{"row":0,"column":0},"end":{"row":17,"column":18},"action":"insert","lines":["// open box","        for(n; openHeight<=n; openHeight++){","            if(openHeight==1 || openHeight==n){","                for(n; width<n; width ++){","                    cout<<\"*\";","                }","            }","            else","                for(n; width<n; width++){","                    if(width==1 || width==n){","                        cout<<\"*\";","                    }","                    else","                        cout<<\" \";","                }","        }","        cout<<endl;","        width = 1;"]}],[{"start":{"row":0,"column":0},"end":{"row":17,"column":18},"action":"remove","lines":["// open box","        for(n; openHeight<=n; openHeight++){","            if(openHeight==1 || openHeight==n){","                for(n; width<n; width ++){","                    cout<<\"*\";","                }","            }","            else","                for(n; width<n; width++){","                    if(width==1 || width==n){","                        cout<<\"*\";","                    }","                    else","                        cout<<\" \";","                }","        }","        cout<<endl;","        width = 1;"],"id":9},{"start":{"row":0,"column":0},"end":{"row":18,"column":19},"action":"insert","lines":["for (openHeight=1; openHeight<=n; openHeight++){ ","        // Print stars for each solid rows ","            if (openHeight==1 || openHeight==n){ ","                for (width=1; width<=n; width++){","                    cout << \"*\"; ","                }","            }","            ","        // stars for hollow rows ","            else","                for (width=1; width<=n; width++){ ","                    if (width==1 || width==n){ ","                        cout << \"*\"; ","                    }","                    else","                    cout << \" \"; ","                }","        // Move to the next line/row ","        cout<<\"\\n\";"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":18,"column":19},"end":{"row":18,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1538155020746,"hash":"21651d56a831d077445d3d355085486e97ecc6bf"}