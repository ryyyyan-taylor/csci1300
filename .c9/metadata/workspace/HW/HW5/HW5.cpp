{"filter":false,"title":"HW5.cpp","tooltip":"/HW/HW5/HW5.cpp","undoManager":{"mark":53,"position":53,"stack":[[{"start":{"row":0,"column":0},"end":{"row":113,"column":1},"action":"insert","lines":["int analyzer(string g1, string g2, string g3, string seq){","    ","    ","    // edge case for any empty strings","    if(g1.empty() || g2.empty() || g2.empty() || seq.empty()){","        cout<<\"Genome and sequence cannot be empty.\";","        return 0;","    }","    ","    // edge case for abnormal lengths","    if(g1.length() != g2.length() || g1.length() != g3.length()){","        cout<<\"Genome length does not match.\";","        return 0;","    }","    ","    // edge case for a sequence that is longer than the genome","    if(seq.length() > g1.length()){","        cout<<\"Sequence length must be smaller than genome length.\";","        return 0;","    }","    ","    int length = (g1.length() + g2.length() + g3.length()) / 3;","    ","    float hamdist1 = seq.length();","    float hamdist2 = seq.length();","    float hamdist3 = seq.length();","    ","","    for(int i=0; i<=length; i++){","        ","        // reset the individual hamming distances each time","        float hamd1 = 0;","        float hamd2 = 0;","        float hamd3 = 0;","        int j = i;","        ","        for(int x=0; x<seq.length(); x++){","            ","            // if the letters are the same, hamming distance does not change","            if(g1[j] == seq[x]){","                hamd1 == hamd1;","            }","            ","            // if the letters are different, +1 to hamming distance","            else if(g1[j] != seq[x]){","                hamd1++;","            }","            ","            // if the letters are the same, hamming distance does not change","            if(g2[j] == seq[x]){","                hamd2 == hamd2;","            }","            ","            // if the letters are different, +1 to hamming distance","            else if(g2[j] != seq[x]){","                hamd2++;","            }","            ","            // if the letters are the same, hamming distance does not change","            if(g3[j] == seq[x]){","                hamd3 == hamd3;","            }","            ","            // if the letters are different, +1 to hamming distance","            else if(g3[j] != seq[x]){","                hamd3++;","            }","            ","            // increment the letter of the sequence that the function is on each time","            j++;","        }","        ","        // reassign the global hamming distance for each string to be the lowest hamming distance achieved so far","        if(hamdist1 > hamd1){","            hamdist1 = hamd1;","        }","        else if(hamdist1 < hamd1){","            hamdist1 = hamdist1;","        }","        ","        if(hamdist2 > hamd2){","            hamdist2 = hamd2;","        }","        else if(hamdist2 < hamd2){","            hamdist2 = hamdist2;","        }","        ","        if(hamdist3 > hamd3){","            hamdist3 = hamd3;","        }","        else if(hamdist3 < hamd3){","            hamdist3 = hamdist3;","        }","    }","","    float sim1, sim2, sim3;","    ","    // calculate the similarity score for each genome","    sim1 = (seq.length() - hamdist1) / seq.length();","    sim2 = (seq.length() - hamdist2) / seq.length();","    sim3 = (seq.length() - hamdist3) / seq.length();","    ","    ","    // output one or multiple genomes being matched best depending on the similarity scores achieved","    if(sim1 >= sim2 && sim1 >= sim3){","        cout<<\"Genome 1 is the best match.\" << endl;","    }","    if(sim2 >= sim1 && sim2 >= sim3){","        cout<<\"Genome 2 is the best match.\" << endl;","    }","    if(sim3 >= sim1 && sim3 >= sim2){","        cout<<\"Genome 3 is the best match.\" << endl;","    }","}"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":32,"column":1},"action":"insert","lines":["double simScore(string seq1, string seq2){","    ","    // define hamming distance and the length of each string as variables","    int hamdist = 0;","    float length1 = seq1.length();","    float length2 = seq2.length();","    ","    // if the genomes are not the same length, return 0","    if(length1 != length2 || seq1.empty() || seq2.empty()){","        return 0;","    }","    ","    // if the genomes are the same length, continue","    else if(length1 == length2){","        ","        // for each letter in the genomes","        for(int i=0; i < length1; i++){","            // if the letters are the same, hamming distance does not change","            if(seq1[i] == seq2[i]){","                hamdist = hamdist;","            }","            ","            //if the letters are different, +1 to hamming distance","            else if(seq1[i] != seq2[i]){","                hamdist++;","            }","        }","    }","    ","    // calculate the similarity between the two strings","    double similarity = (length1 - hamdist) / length2;","    return similarity;","}"],"id":3}],[{"start":{"row":33,"column":0},"end":{"row":34,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":34,"column":0},"end":{"row":35,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":35,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["/**"," * Take four string inputs, three of the same length and one shorter"," * If any of the strings are empty, print an error and return 0"," * If any of the first three strings are not the same length, print an error and return 0"," * If the last string is longer than the first three, print an error and return 0"," * Starting with the first position, calculate the similarity score for each of the first three strings and the last string"," * Move to the next letter, and calculate the similarity score from that position"," * Assign the lowest of the 2 scores and assign that as the hamming distance for each string"," * Repeat lines 13 and 14 until the end of the strings"," * Calculate the similarity score for each using the lowest hamming distance for each of the three strings"," * Print which string is the best match based on which has the highest similairty score"," * If multiple have the same score, print multiple"," * Return nothing"," */"],"id":5}],[{"start":{"row":48,"column":3},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":49,"column":0},"end":{"row":49,"column":1},"action":"insert","lines":[" "]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":13,"column":3},"action":"insert","lines":["// CSCI1300 Fall 2018","// Author: <Ryan Taylor>","// Recitation: 105 â€“ Ashwin Sankaralingam","// Cloud9 Workspace Editor Link: https://ide.c9.io/ryta4737/recitation","// HW 5","","/**"," * Take 2 string inputs"," * If the inputs are not the same length, stop the function there"," * If the letters of the strings are not the same in a position, add 1 to the hamming distance"," * If the letters of the strings are the same, hamming distance does not change"," * Calculate the similarrity score between the two using the length of the strings minus the hamming distance all over the length"," * Return the similarity score"," */"],"id":8}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":6,"column":0},"end":{"row":8,"column":20},"action":"insert","lines":["#include <iostream>","#include <string>","using namespace std;"],"id":10}],[{"start":{"row":182,"column":1},"end":{"row":183,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":183,"column":0},"end":{"row":184,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":184,"column":0},"end":{"row":208,"column":1},"action":"insert","lines":["int main(){","    string test1 = \"CATTATGCATTATATACAT\";","    string test2 = \"CATCACCACCCTCCTCCTC\";","    cout<< simScore(test1, test2) << endl; // expected 0.315789","    ","    test1 = \"ATGC\";","    test2 = \"ATGA\";","    cout << simScore(test1, test2) << endl; // expected 0.75","    ","    test1 = \"CCDCCD\";","    test2 = \"CCDCCD\";","    cout << simScore(test1, test2) << endl; // expected 1","    ","    test1 = \"ATG\";","    test2 = \"GAT\";","    cout << simScore(test1, test2) << endl; // expected 0","    ","    test1 = \"AATGTCGAT\";","    test2 = \"AGCATGCTA\";","    cout << simScore(test1, test2) << endl; // expected 0.222222","    ","    test1 = \"CATTA\";","    test2 = \"TAATC\";","    cout << simScore(test1, test2) << endl; // expected 0.4","}"],"id":12}],[{"start":{"row":185,"column":4},"end":{"row":186,"column":0},"action":"insert","lines":["",""],"id":13},{"start":{"row":186,"column":0},"end":{"row":186,"column":4},"action":"insert","lines":["    "]},{"start":{"row":186,"column":4},"end":{"row":187,"column":0},"action":"insert","lines":["",""]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":186,"column":4},"end":{"row":186,"column":5},"action":"insert","lines":["/"],"id":14},{"start":{"row":186,"column":5},"end":{"row":186,"column":6},"action":"insert","lines":["/"]}],[{"start":{"row":186,"column":6},"end":{"row":186,"column":7},"action":"insert","lines":[" "],"id":15},{"start":{"row":186,"column":7},"end":{"row":186,"column":8},"action":"insert","lines":["t"]},{"start":{"row":186,"column":8},"end":{"row":186,"column":9},"action":"insert","lines":["e"]},{"start":{"row":186,"column":9},"end":{"row":186,"column":10},"action":"insert","lines":["s"]},{"start":{"row":186,"column":10},"end":{"row":186,"column":11},"action":"insert","lines":["t"]}],[{"start":{"row":186,"column":11},"end":{"row":186,"column":12},"action":"insert","lines":[" "],"id":16},{"start":{"row":186,"column":12},"end":{"row":186,"column":13},"action":"insert","lines":["c"]},{"start":{"row":186,"column":13},"end":{"row":186,"column":14},"action":"insert","lines":["a"]},{"start":{"row":186,"column":14},"end":{"row":186,"column":15},"action":"insert","lines":["s"]},{"start":{"row":186,"column":15},"end":{"row":186,"column":16},"action":"insert","lines":["e"]},{"start":{"row":186,"column":16},"end":{"row":186,"column":17},"action":"insert","lines":["s"]}],[{"start":{"row":186,"column":17},"end":{"row":186,"column":18},"action":"insert","lines":[" "],"id":17},{"start":{"row":186,"column":18},"end":{"row":186,"column":19},"action":"insert","lines":["f"]},{"start":{"row":186,"column":19},"end":{"row":186,"column":20},"action":"insert","lines":["r"]},{"start":{"row":186,"column":20},"end":{"row":186,"column":21},"action":"insert","lines":["o"]}],[{"start":{"row":186,"column":20},"end":{"row":186,"column":21},"action":"remove","lines":["o"],"id":18},{"start":{"row":186,"column":19},"end":{"row":186,"column":20},"action":"remove","lines":["r"]}],[{"start":{"row":186,"column":19},"end":{"row":186,"column":20},"action":"insert","lines":["o"],"id":19},{"start":{"row":186,"column":20},"end":{"row":186,"column":21},"action":"insert","lines":["r"]}],[{"start":{"row":186,"column":21},"end":{"row":186,"column":22},"action":"insert","lines":[" "],"id":20},{"start":{"row":186,"column":22},"end":{"row":186,"column":23},"action":"insert","lines":["s"]},{"start":{"row":186,"column":23},"end":{"row":186,"column":24},"action":"insert","lines":["i"]},{"start":{"row":186,"column":24},"end":{"row":186,"column":25},"action":"insert","lines":["m"]},{"start":{"row":186,"column":25},"end":{"row":186,"column":26},"action":"insert","lines":["s"]}],[{"start":{"row":186,"column":25},"end":{"row":186,"column":26},"action":"remove","lines":["s"],"id":21}],[{"start":{"row":186,"column":25},"end":{"row":186,"column":26},"action":"insert","lines":["S"],"id":22},{"start":{"row":186,"column":26},"end":{"row":186,"column":27},"action":"insert","lines":["c"]},{"start":{"row":186,"column":27},"end":{"row":186,"column":28},"action":"insert","lines":["o"]},{"start":{"row":186,"column":28},"end":{"row":186,"column":29},"action":"insert","lines":["r"]},{"start":{"row":186,"column":29},"end":{"row":186,"column":30},"action":"insert","lines":["e"]}],[{"start":{"row":209,"column":59},"end":{"row":210,"column":0},"action":"insert","lines":["",""],"id":23},{"start":{"row":210,"column":0},"end":{"row":210,"column":4},"action":"insert","lines":["    "]},{"start":{"row":210,"column":4},"end":{"row":211,"column":0},"action":"insert","lines":["",""]},{"start":{"row":211,"column":0},"end":{"row":211,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":211,"column":4},"end":{"row":257,"column":92},"action":"insert","lines":["string test1 = \"ACATC\";","    string test2 = \"ACTTA\";","    string test3 = \"TACAT\";","    string testseq = \"AACT\";","    analyzer(test1, test2, test3, testseq); // expected 1, 2, 3","    ","    cout << \"\\n\";","    ","    test1 = \"AATGTTTCAC\";","    test2 = \"GACCGACTAA\";","    test3 = \"AAGGTGCTCC\";","    testseq = \"TACTA\";","    analyzer(test1, test2, test3, testseq); // expected 2","    ","    cout << \"\\n\";","    ","    test1 = \"AACT\";","    test2 = \"AACT\";","    test3 = \"AATG\";","    testseq = \"AACT\";","    analyzer(test1, test2, test3, testseq); // expected 1, 2","    ","    cout << \"\\n\";","    ","    test1 = \"\";","    test2 = \"CATTA\";","    test3 = \"TAATC\";","    testseq = \"ACTA\";","    analyzer(test1, test2, test3, testseq); // expected genome and sequeance cannot be empty","    ","    cout << \"\\n\";","    cout << \"\\n\";","    ","    test1 = \"AGTCTAGC\";","    test2 = \"CATTA\";","    test3 = \"TAATC\";","    testseq = \"ACTA\";","    analyzer(test1, test2, test3, testseq); // expected genome length does not match","    ","    cout << \"\\n\";","    cout << \"\\n\";","    ","    test1 = \"AGTCA\";","    test2 = \"CATTA\";","    test3 = \"TAATC\";","    testseq = \"ACTAGTATC\";","    analyzer(test1, test2, test3, testseq); // expected sequence must be smaller than genome"],"id":24}],[{"start":{"row":210,"column":4},"end":{"row":211,"column":0},"action":"insert","lines":["",""],"id":25},{"start":{"row":211,"column":0},"end":{"row":211,"column":4},"action":"insert","lines":["    "]},{"start":{"row":211,"column":4},"end":{"row":212,"column":0},"action":"insert","lines":["",""]},{"start":{"row":212,"column":0},"end":{"row":212,"column":4},"action":"insert","lines":["    "]},{"start":{"row":212,"column":4},"end":{"row":212,"column":5},"action":"insert","lines":["/"]},{"start":{"row":212,"column":5},"end":{"row":212,"column":6},"action":"insert","lines":["/"]}],[{"start":{"row":212,"column":6},"end":{"row":212,"column":7},"action":"insert","lines":[" "],"id":26},{"start":{"row":212,"column":7},"end":{"row":212,"column":8},"action":"insert","lines":["t"]},{"start":{"row":212,"column":8},"end":{"row":212,"column":9},"action":"insert","lines":["e"]},{"start":{"row":212,"column":9},"end":{"row":212,"column":10},"action":"insert","lines":["s"]},{"start":{"row":212,"column":10},"end":{"row":212,"column":11},"action":"insert","lines":["t"]}],[{"start":{"row":212,"column":11},"end":{"row":212,"column":12},"action":"insert","lines":[" "],"id":27},{"start":{"row":212,"column":12},"end":{"row":212,"column":13},"action":"insert","lines":["c"]},{"start":{"row":212,"column":13},"end":{"row":212,"column":14},"action":"insert","lines":["a"]},{"start":{"row":212,"column":14},"end":{"row":212,"column":15},"action":"insert","lines":["s"]},{"start":{"row":212,"column":15},"end":{"row":212,"column":16},"action":"insert","lines":["e"]},{"start":{"row":212,"column":16},"end":{"row":212,"column":17},"action":"insert","lines":["s"]}],[{"start":{"row":212,"column":17},"end":{"row":212,"column":18},"action":"insert","lines":[" "],"id":28},{"start":{"row":212,"column":18},"end":{"row":212,"column":19},"action":"insert","lines":["f"]},{"start":{"row":212,"column":19},"end":{"row":212,"column":20},"action":"insert","lines":["o"]},{"start":{"row":212,"column":20},"end":{"row":212,"column":21},"action":"insert","lines":["r"]}],[{"start":{"row":212,"column":21},"end":{"row":212,"column":22},"action":"insert","lines":[" "],"id":29},{"start":{"row":212,"column":22},"end":{"row":212,"column":23},"action":"insert","lines":["a"]},{"start":{"row":212,"column":23},"end":{"row":212,"column":24},"action":"insert","lines":["n"]},{"start":{"row":212,"column":24},"end":{"row":212,"column":25},"action":"insert","lines":["a"]},{"start":{"row":212,"column":25},"end":{"row":212,"column":26},"action":"insert","lines":["l"]}],[{"start":{"row":212,"column":26},"end":{"row":212,"column":27},"action":"insert","lines":["y"],"id":30},{"start":{"row":212,"column":27},"end":{"row":212,"column":28},"action":"insert","lines":["z"]},{"start":{"row":212,"column":28},"end":{"row":212,"column":29},"action":"insert","lines":["e"]},{"start":{"row":212,"column":29},"end":{"row":212,"column":30},"action":"insert","lines":["r"]}],[{"start":{"row":213,"column":10},"end":{"row":213,"column":11},"action":"remove","lines":[" "],"id":31},{"start":{"row":213,"column":9},"end":{"row":213,"column":10},"action":"remove","lines":["g"]},{"start":{"row":213,"column":8},"end":{"row":213,"column":9},"action":"remove","lines":["n"]},{"start":{"row":213,"column":7},"end":{"row":213,"column":8},"action":"remove","lines":["i"]},{"start":{"row":213,"column":6},"end":{"row":213,"column":7},"action":"remove","lines":["r"]},{"start":{"row":213,"column":5},"end":{"row":213,"column":6},"action":"remove","lines":["t"]},{"start":{"row":213,"column":4},"end":{"row":213,"column":5},"action":"remove","lines":["s"]}],[{"start":{"row":214,"column":10},"end":{"row":214,"column":11},"action":"remove","lines":[" "],"id":32},{"start":{"row":214,"column":9},"end":{"row":214,"column":10},"action":"remove","lines":["g"]},{"start":{"row":214,"column":8},"end":{"row":214,"column":9},"action":"remove","lines":["n"]},{"start":{"row":214,"column":7},"end":{"row":214,"column":8},"action":"remove","lines":["i"]},{"start":{"row":214,"column":6},"end":{"row":214,"column":7},"action":"remove","lines":["r"]},{"start":{"row":214,"column":5},"end":{"row":214,"column":6},"action":"remove","lines":["t"]},{"start":{"row":214,"column":4},"end":{"row":214,"column":5},"action":"remove","lines":["s"]}],[{"start":{"row":209,"column":59},"end":{"row":210,"column":0},"action":"insert","lines":["",""],"id":33},{"start":{"row":210,"column":0},"end":{"row":210,"column":4},"action":"insert","lines":["    "]},{"start":{"row":210,"column":4},"end":{"row":211,"column":0},"action":"insert","lines":["",""]},{"start":{"row":211,"column":0},"end":{"row":211,"column":4},"action":"insert","lines":["    "]},{"start":{"row":211,"column":4},"end":{"row":211,"column":5},"action":"insert","lines":["c"]},{"start":{"row":211,"column":5},"end":{"row":211,"column":6},"action":"insert","lines":["o"]},{"start":{"row":211,"column":6},"end":{"row":211,"column":7},"action":"insert","lines":["j"]},{"start":{"row":211,"column":7},"end":{"row":211,"column":8},"action":"insert","lines":["u"]},{"start":{"row":211,"column":8},"end":{"row":211,"column":9},"action":"insert","lines":["t"]}],[{"start":{"row":211,"column":8},"end":{"row":211,"column":9},"action":"remove","lines":["t"],"id":34},{"start":{"row":211,"column":7},"end":{"row":211,"column":8},"action":"remove","lines":["u"]},{"start":{"row":211,"column":6},"end":{"row":211,"column":7},"action":"remove","lines":["j"]}],[{"start":{"row":211,"column":6},"end":{"row":211,"column":7},"action":"insert","lines":["u"],"id":35},{"start":{"row":211,"column":7},"end":{"row":211,"column":8},"action":"insert","lines":["t"]}],[{"start":{"row":211,"column":4},"end":{"row":211,"column":8},"action":"remove","lines":["cout"],"id":36},{"start":{"row":211,"column":4},"end":{"row":211,"column":8},"action":"insert","lines":["cout"]}],[{"start":{"row":211,"column":8},"end":{"row":211,"column":9},"action":"insert","lines":[" "],"id":37},{"start":{"row":211,"column":9},"end":{"row":211,"column":10},"action":"insert","lines":["<"]}],[{"start":{"row":211,"column":10},"end":{"row":211,"column":11},"action":"insert","lines":["<"],"id":38}],[{"start":{"row":211,"column":11},"end":{"row":211,"column":12},"action":"insert","lines":[" "],"id":39},{"start":{"row":211,"column":12},"end":{"row":211,"column":13},"action":"insert","lines":["|"]}],[{"start":{"row":211,"column":12},"end":{"row":211,"column":13},"action":"remove","lines":["|"],"id":40}],[{"start":{"row":211,"column":12},"end":{"row":211,"column":14},"action":"insert","lines":["\"\""],"id":41}],[{"start":{"row":211,"column":13},"end":{"row":212,"column":0},"action":"insert","lines":["",""],"id":42},{"start":{"row":212,"column":0},"end":{"row":212,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":212,"column":0},"end":{"row":212,"column":4},"action":"remove","lines":["    "],"id":43},{"start":{"row":211,"column":13},"end":{"row":212,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":211,"column":13},"end":{"row":211,"column":14},"action":"insert","lines":["\\"],"id":44},{"start":{"row":211,"column":14},"end":{"row":211,"column":15},"action":"insert","lines":["n"]}],[{"start":{"row":211,"column":16},"end":{"row":211,"column":17},"action":"insert","lines":[";"],"id":45}],[{"start":{"row":211,"column":15},"end":{"row":211,"column":16},"action":"insert","lines":["\\"],"id":46},{"start":{"row":211,"column":16},"end":{"row":211,"column":17},"action":"insert","lines":["n"]}],[{"start":{"row":211,"column":16},"end":{"row":211,"column":17},"action":"remove","lines":["n"],"id":47},{"start":{"row":211,"column":16},"end":{"row":211,"column":17},"action":"insert","lines":["n"]}],[{"start":{"row":245,"column":15},"end":{"row":245,"column":16},"action":"insert","lines":["\\"],"id":48},{"start":{"row":245,"column":16},"end":{"row":245,"column":17},"action":"insert","lines":["n"]}],[{"start":{"row":245,"column":16},"end":{"row":245,"column":17},"action":"remove","lines":["n"],"id":49},{"start":{"row":245,"column":16},"end":{"row":245,"column":17},"action":"insert","lines":["n"]}],[{"start":{"row":254,"column":15},"end":{"row":254,"column":16},"action":"insert","lines":["\\"],"id":50},{"start":{"row":254,"column":16},"end":{"row":254,"column":17},"action":"insert","lines":["n"]}],[{"start":{"row":254,"column":16},"end":{"row":254,"column":17},"action":"remove","lines":["n"],"id":51},{"start":{"row":254,"column":16},"end":{"row":254,"column":17},"action":"insert","lines":["n"]}],[{"start":{"row":255,"column":4},"end":{"row":255,"column":17},"action":"remove","lines":["cout << \"\\n\";"],"id":52},{"start":{"row":255,"column":0},"end":{"row":255,"column":4},"action":"remove","lines":["    "]},{"start":{"row":254,"column":19},"end":{"row":255,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":246,"column":16},"end":{"row":246,"column":17},"action":"remove","lines":[";"],"id":53},{"start":{"row":246,"column":15},"end":{"row":246,"column":16},"action":"remove","lines":["\""]},{"start":{"row":246,"column":14},"end":{"row":246,"column":15},"action":"remove","lines":["n"]},{"start":{"row":246,"column":13},"end":{"row":246,"column":14},"action":"remove","lines":["\\"]},{"start":{"row":246,"column":12},"end":{"row":246,"column":13},"action":"remove","lines":["\""]},{"start":{"row":246,"column":11},"end":{"row":246,"column":12},"action":"remove","lines":[" "]},{"start":{"row":246,"column":10},"end":{"row":246,"column":11},"action":"remove","lines":["<"]},{"start":{"row":246,"column":9},"end":{"row":246,"column":10},"action":"remove","lines":["<"]},{"start":{"row":246,"column":8},"end":{"row":246,"column":9},"action":"remove","lines":[" "]},{"start":{"row":246,"column":7},"end":{"row":246,"column":8},"action":"remove","lines":["t"]},{"start":{"row":246,"column":6},"end":{"row":246,"column":7},"action":"remove","lines":["u"]},{"start":{"row":246,"column":5},"end":{"row":246,"column":6},"action":"remove","lines":["o"]},{"start":{"row":246,"column":4},"end":{"row":246,"column":5},"action":"remove","lines":["c"]}],[{"start":{"row":246,"column":0},"end":{"row":246,"column":4},"action":"remove","lines":["    "],"id":54},{"start":{"row":245,"column":19},"end":{"row":246,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":3150.171875,"scrollleft":1.5,"selection":{"start":{"row":245,"column":19},"end":{"row":245,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1539460089776,"hash":"94b83a30c38943e224cd11c9932f51a1999f2eaf"}